Вместо конкатенации используем интерполяцию

trimIndent() берет минимальный отступ из всех строк и убирает его во всех строках.
trimMargin() убирает все пробелы в начале каждой строки, поэтому он просто выровняет весь текст по левому краю, что не всегда надо.
trim() убирает пробелы в начале и конце всего текста.
removePrefix() убирает префикс в начале текста.

Если попробовать написать так:
val str = "abc"
а затем вывести:
print("$str.length")
то в консоль выведется сообщение
abc.length.
В то время как, если вывести:
print("${str.length}")
то выведется 3

$... выводит только значение самой переменной, все что идет после имени переменной считается частью шаблона
${...} выводит все что записано в фигурных скобках

Так как строки в Kotlin, как и во многих других языках программирования являются неизменяемыми, результат сложения возвращает новую строку, которую надо присвоить в какую-то переменную.

В Kotlin можно прибавлять только число к строке, то есть, если число стоит после строки.
Это связано с тем, что оператор сложения + при запуске программы заменяется на функцию .plus(_переменная_). У строк есть функция .plus(_число_), а у чисел нет функции .plus(_строка_).]

Вариант записи " " называется снятой строкой, а """ """ – исходной
Соответственно, при записи через " " строка как бы снимается с той строки, которая была введена и все экранированные символы заменяются на соответствующие текстовые символы.
В то же время запись """ """ не использует экранированных символов, а считывает текст таким, какой он есть. При такой записи сразу используются текстовые символы, поэтому вместо \n можно просто переходить на новую строку, а вместо \t ставить табуляцию.